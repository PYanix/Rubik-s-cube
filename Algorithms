from copy import deepcopy



class Algorithms:
    def pif_paf_right(self, cube_ui, cube_model):  # правый пифпаф
        cube_model.rotate_R()
        cube_model.rotate_U()
        cube_model.rotate_R_streak()
        cube_model.rotate_U_streak()

        cube_ui.rotate_side('RIGHT', False)
        cube_ui.rotate_side('UP', False)
        cube_ui.rotate_side('RIGHT', True)
        cube_ui.rotate_side('UP', True)

    def pif_paf_left(self, cube_ui, cube_model):  # левый пифпаф
        cube_model.rotate_F_streak()
        cube_model.rotate_U_streak()
        cube_model.rotate_F()
        cube_model.rotate_U()

        cube_ui.rotate_side('FACE', True)
        cube_ui.rotate_side('UP', True)
        cube_ui.rotate_side('FACE', False)
        cube_ui.rotate_side('UP', False)
    def low_cross(self, cube_model, cube_ui, cube_solved):
        # проверка на собранность
        flag = True
        for (x, y) in ((1, 0), (0, 1), (-1, 0), (0, -1)):
            if cube_model.get_colors(x, y, -1) != cube_solved.get_colors(x, y, -1):
                flag = False
                break
        if flag:
            return

        #желто-зеленый:
            #идем по нижней грани:

        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(0, 1, -1).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(-1, 0, -1).values()):
            cube_model.rotate_D_streak()
            cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(0, -1, -1).values()):
            for _ in range(2):
                cube_model.rotate_D_streak()
                cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)


        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(1, 0, -1).values()):
            cube_model.rotate_D()
            cube_ui.rotate_side('DOWN', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)


    #идем по средней грани:
        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(1, 1, 0).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(-1, 1, 0).values()):
            cube_model.rotate_cube_U()
            cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)


        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(-1, -1, 0).values()):
            for _ in range(2):
                cube_model.rotate_cube_U()
                cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)


        if set(cube_solved.get_colors(0, 1, -1).values()) == set(cube_model.get_colors(1, -1, 0).values()):
            cube_model.rotate_cube_U_streak()
            cube_ui.rotate_cube('UP', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)


#красно-зеленый:
    # идем по нижней грани:
        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(0, 1, -1).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(-1, 0, -1).values()):
            cube_model.rotate_D_streak()
            cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(0, -1, -1).values()):
            for _ in range(2):
                cube_model.rotate_D_streak()
                cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(1, 0, -1).values()):
            cube_model.rotate_D()
            cube_ui.rotate_side('DOWN', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

    # идем по средней грани:
        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(1, 1, 0).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(-1, 1, 0).values()):
            cube_model.rotate_cube_U()
            cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(-1, -1, 0).values()):
            for _ in range(2):
                cube_model.rotate_cube_U()
                cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(1, 0, -1).values()) == set(cube_model.get_colors(1, -1, 0).values()):
            cube_model.rotate_cube_U_streak()
            cube_ui.rotate_cube('UP', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)


#бело-зеленый:
    # идем по нижней грани:

        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(0, 1, -1).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(-1, 0, -1).values()):
            cube_model.rotate_D_streak()
            cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(0, -1, -1).values()):
            for _ in range(2):
                cube_model.rotate_D_streak()
                cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(1, 0, -1).values()):
            cube_model.rotate_D()
            cube_ui.rotate_side('DOWN', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

    # идем по средней грани:
        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(1, 1, 0).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(-1, 1, 0).values()):
            cube_model.rotate_cube_U()
            cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(-1, -1, 0).values()):
            for _ in range(2):
                cube_model.rotate_cube_U()
                cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(0, -1, -1).values()) == set(cube_model.get_colors(1, -1, 0).values()):
            cube_model.rotate_cube_U_streak()
            cube_ui.rotate_cube('UP', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)


#оранжево-зеленый:
    # идем по нижней грани:
        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(0, 1, -1).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(-1, 0, -1).values()):
            cube_model.rotate_D_streak()
            cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(0, -1, -1).values()):
            for _ in range(2):
                cube_model.rotate_D_streak()
                cube_ui.rotate_side('DOWN', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(1, 0, -1).values()):
            cube_model.rotate_D()
            cube_ui.rotate_side('DOWN', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            for _ in range(2):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)

    # идем по средней грани:
        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(1, 1, 0).values()):
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(-1, 1, 0).values()):
            cube_model.rotate_cube_U()
            cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(-1, -1, 0).values()):
            for _ in range(2):
                cube_model.rotate_cube_U()
                cube_ui.rotate_cube('UP', False)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        if set(cube_solved.get_colors(-1, 0, -1).values()) == set(cube_model.get_colors(1, -1, 0).values()):
            cube_model.rotate_cube_U_streak()
            cube_ui.rotate_cube('UP', True)
            if cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                    cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D'] or \
                        cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)


#смена ориентации центральных кубиков ребер:
        for _ in range(4):
            if (cube_model.get_colors(1, 0, 1)['U'] != cube_model.get_colors(0, 0, -1)['D'] or
                cube_model.get_colors(0, 1, 1)['U'] != cube_model.get_colors(0, 0, -1)['D'] or
                cube_model.get_colors(-1, 0, 1)['U'] != cube_model.get_colors(0, 0, -1)['D'] or
                cube_model.get_colors(0, -1, 1)['U'] != cube_model.get_colors(0, 0, -1)['D']):
                while cube_model.get_colors(0, 1, 1)['U'] == cube_model.get_colors(0, 0, -1)['D']:
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
                cube_model.rotate_R_streak()
                cube_ui.rotate_side('RIGHT', True)
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
                cube_model.rotate_F_streak()
                cube_ui.rotate_side('FACE', True)

        for _ in range(4):
            if (cube_model.get_colors(1, 0, -1)['D'] != cube_model.get_colors(0, 0, -1)['D'] or
                cube_model.get_colors(0, 1, -1)['D'] != cube_model.get_colors(0, 0, -1)['D'] or
                cube_model.get_colors(-1, 0, -1)['D'] != cube_model.get_colors(0, 0, -1)['D'] or
                cube_model.get_colors(0, -1, -1)['D'] != cube_model.get_colors(0, 0, -1)['D']):
                while (cube_model.get_colors(1, 0, 1)['F'] != cube_model.get_colors(1, 0, 0)['F'] or
                    cube_model.get_colors(1, 0, 1)['U'] != cube_model.get_colors(0, 0, -1)['D']):
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
                for _ in range(2):
                    cube_model.rotate_F()
                    cube_ui.rotate_side('FACE', False)
                cube_model.rotate_cube_U()
                cube_ui.rotate_cube('UP', False)
        while cube_model.get_colors(1, 0, 0) != cube_solved.get_colors(1, 0, 0):
            cube_solved.rotate_cube_U()



    def F1L(self, cube_model, cube_ui, cube_solved):  # сборка первого слоя
        z0 = -1
        x0, y0 = 1, 1
        for _ in range(4):
            colors = cube_model.get_colors(x0, y0, z0)
            solved_colors = cube_solved.get_colors(x0, y0, z0)
            if set(colors.values()) == set(solved_colors.values()) and colors != solved_colors:
                # кубик стоит на месте, но цвета необходимо перевернуть
                if 'D' in colors['F']:
                    for _ in range(2):
                        self.pif_paf_left(cube_ui=cube_ui, cube_model=cube_model)
                else:
                    for _ in range(2):
                        self.pif_paf_right(cube_ui=cube_ui, cube_model=cube_model)

            elif set(colors.values()) != set(solved_colors.values()):
                # найти нужный кубик:
                x1, y1, z1, = 0, 0, 0
                for x in (-1, 1):
                    for y in (-1, 1):
                        for z in (-1, 1):
                            if set(cube_model.get_colors(x, y, z).values()) == set(solved_colors.values()):
                                x1, y1, z1, = x, y, z
                # перевести нужный кубик на верхнюю грань над нужным положением:
                if z1 == -1:
                    if (x1, y1) == (1, -1):
                        cube_model.rotate_cube_U_streak()
                        cube_ui.rotate_cube('UP', True)
                        self.pif_paf_left(cube_ui=cube_ui, cube_model=cube_model)
                        cube_model.rotate_cube_U()
                        cube_ui.rotate_cube('UP', False)
                    elif (x1, y1) == (-1, -1):
                        for _ in range(2):
                            cube_model.rotate_cube_U_streak()
                        for _ in range(2):
                            cube_ui.rotate_cube('UP', True)
                        self.pif_paf_left(cube_ui=cube_ui, cube_model=cube_model)
                        for _ in range(2):
                            cube_model.rotate_cube_U()
                        for _ in range(2):
                            cube_ui.rotate_cube('UP', False)
                    else:
                        cube_model.rotate_cube_U()
                        cube_ui.rotate_cube('UP', False)
                        self.pif_paf_right(cube_ui=cube_ui, cube_model=cube_model)
                        cube_model.rotate_cube_U_streak()
                        cube_ui.rotate_cube('UP', True)
                # Поставить кубик над нужным местом
                if (x1, y1) == (1, -1):
                    cube_model.rotate_U_streak()
                    cube_ui.rotate_side('UP', True)
                elif (x1, y1) == (-1, -1):
                    for _ in range(2):
                        cube_model.rotate_U_streak()
                    for _ in range(2):
                        cube_ui.rotate_side('UP', True)
                elif (x1, y1) == (-1, 1):
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
                # поставить кубик на место:
                if cube_model.get_colors(x0, y0, 1)['F'] == cube_solved.get_colors(x0, y0, -1)['D']:
                    self.pif_paf_left(cube_ui=cube_ui, cube_model=cube_model)
                elif cube_model.get_colors(x0, y0, 1)['U'] == cube_solved.get_colors(x0, y0, -1)['D']:
                    for _ in range(3):
                        self.pif_paf_right(cube_ui=cube_ui, cube_model=cube_model)
                else:
                    self.pif_paf_right(cube_ui=cube_ui, cube_model=cube_model)

            flag_continue = False
            for x in range(-1, 2):
                for y in range(-1, 2):
                    if cube_model.get_colors(x, y, -1) != cube_solved.get_colors(x, y, -1):
                        flag_continue = True
                        break
            if not flag_continue:
                break

            cube_model.rotate_cube_U()
            cube_solved.rotate_cube_U()
            cube_ui.rotate_cube('UP', False)

    def F2L(self, cube_model, cube_ui, cube_solved):  # сборка первых двух слоев
        def F2L_right():
            cube_model.rotate_U_streak()
            cube_model.rotate_F_streak()
            cube_model.rotate_R()
            cube_model.rotate_U()
            cube_model.rotate_R_streak()
            cube_model.rotate_U_streak()
            cube_model.rotate_R_streak()
            cube_model.rotate_F()
            cube_model.rotate_R()

            cube_ui.rotate_side('UP', True)
            cube_ui.rotate_side('FACE', True)
            cube_ui.rotate_side('RIGHT', False)
            cube_ui.rotate_side('UP', False)
            cube_ui.rotate_side('RIGHT', True)
            cube_ui.rotate_side('UP', True)
            cube_ui.rotate_side('RIGHT', True)
            cube_ui.rotate_side('FACE', False)
            cube_ui.rotate_side('RIGHT', False)

        def F2L_left():
            cube_model.rotate_U()
            cube_model.rotate_R()
            cube_model.rotate_U_streak()
            cube_model.rotate_R_streak()
            cube_model.rotate_F()
            cube_model.rotate_R_streak()
            cube_model.rotate_F_streak()
            cube_model.rotate_R()

            cube_ui.rotate_side('UP', False)
            cube_ui.rotate_side('RIGHT', False)
            cube_ui.rotate_side('UP', True)
            cube_ui.rotate_side('RIGHT', True)
            cube_ui.rotate_side('FACE', False)
            cube_ui.rotate_side('RIGHT', True)
            cube_ui.rotate_side('FACE', True)
            cube_ui.rotate_side('RIGHT', False)
        for p in range(4):
            # проверка на собранность
            flag = True
            for (x, y) in ((1, 1), (-1, 1), (-1, 1), (-1, -1)):
                if cube_model.get_colors(x, y, 0) != cube_solved.get_colors(x, y, 0):
                    flag = False
                    break
            if flag:
                return
            x0, y0, z0 = 1, 1, 0
            flag = True
            for x in range(-1, 2):
                for y in range(-1, 2):
                    for z in range(0, 2):
                        s = str(x) + str(y) + str(z)
                        if s.count('0') != 1:
                            continue
                        if set(cube_model.get_colors(x, y, z).values()) != set(
                                cube_solved.get_colors(x0, y0, z0).values()):
                            continue # если кубик не подошел продолжаем поиск нужного на данную позицию

                        if (x0, y0, z0) == (x, y, z):  # если кубик стоит на месте
                            if cube_model.get_colors(x, y, z) == cube_solved.get_colors(x0, y0, z0):  # цвета верные
                                flag = False
                                break
                            else:  # цвета надо переставить
                                F2L_right()
                                cube_model.rotate_U()
                                cube_ui.rotate_side('UP', False)
                                F2L_left()
                        else:  # если кубик надо переставить на нужное место
                            if z == 0: # выводим на верхнюю грань, если кубик там не находился
                                if (x, y) == (1, -1):
                                    cube_model.rotate_cube_U_streak()
                                    cube_ui.rotate_cube('UP', True)
                                    F2L_right()
                                    cube_model.rotate_cube_U()
                                    cube_ui.rotate_cube('UP', False)
                                elif (x, y) == (-1, -1):
                                    cube_model.rotate_cube_U_streak()
                                    cube_model.rotate_cube_U_streak()
                                    cube_ui.rotate_cube('UP', True)
                                    cube_ui.rotate_cube('UP', True)
                                    F2L_right()
                                    cube_model.rotate_cube_U()
                                    cube_model.rotate_cube_U()
                                    cube_ui.rotate_cube('UP', False)
                                    cube_ui.rotate_cube('UP', False)
                                elif (x, y) == (-1, 1):
                                    cube_model.rotate_cube_U()
                                    cube_ui.rotate_cube('UP', False)
                                    F2L_right()
                                    cube_model.rotate_cube_U_streak()
                                    cube_ui.rotate_cube('UP', True)
                            k = 0
                            while ((cube_model.get_colors(0, 1, 1)['R'] != cube_solved.get_colors(x0, y0, z0)['R']
                                   or cube_model.get_colors(0, 1, 1)['U'] != cube_solved.get_colors(x0, y0, z0)['F'])
                                   and (cube_model.get_colors(1, 0, 1)['F'] != cube_solved.get_colors(x0, y0, z0)['F']
                                   or cube_model.get_colors(1, 0, 1)['U'] != cube_solved.get_colors(x0, y0, z0)['R'])):
                                cube_model.rotate_U()
                                cube_ui.rotate_side('UP', False)
                                k+=1
                                if k>5:
                                    break
                            if (cube_model.get_colors(0, 1, 1)['R'] == cube_solved.get_colors(x0, y0, z0)['R']
                                    and cube_model.get_colors(0, 1, 1)['U'] == cube_solved.get_colors(x0, y0, z0)['F']):
                                F2L_right()
                            else:
                                F2L_left()
                    if not flag:
                        break
                if not flag:
                    break
            cube_model.rotate_cube_U()
            cube_solved.rotate_cube_U()
            cube_ui.rotate_cube('UP', False)
    
    def up_cross_colors(self, cube_model, cube_ui, cube_solved):
        # проверка на собранность:
        flag = True
        for (x, y) in ((1, 0), (0, 1), (-1, 0), (0, -1)):
            if cube_model.get_colors(x, y, 1)['U'] != cube_solved.get_colors(x, y, 1)['U']:
                flag = False
                break
        if flag:
            return

        up_colors = deepcopy(cube_model.U_colors)

        def horizontal_line():
            cube_model.rotate_F()
            cube_ui.rotate_side('FACE', False)
            self.pif_paf_right(cube_ui=cube_ui, cube_model=cube_model)
            cube_model.rotate_F_streak()
            cube_ui.rotate_side('FACE', True)
        
        def corner():
            cube_model.rotate_F()
            cube_ui.rotate_side('FACE', False)
            for _ in range(2):
                self.pif_paf_right(cube_ui=cube_ui, cube_model=cube_model)
            cube_model.rotate_F_streak()
            cube_ui.rotate_side('FACE', True)
        
        def point():
            corner()
            cube_model.rotate_U()
            cube_ui.rotate_side('UP', False)
            horizontal_line()

        solved_up_color = cube_model.get_colors(0, 0, 1)['U']
        if up_colors[0][1] != solved_up_color and up_colors[1][0] != solved_up_color and up_colors[1][2] != solved_up_color and up_colors[2][1] != solved_up_color:
            point()
        elif up_colors[0][1] == solved_up_color and up_colors[2][1] == solved_up_color and up_colors[1][0] != solved_up_color and up_colors[1][2] != solved_up_color:
            cube_model.rotate_U()
            cube_ui.rotate_side('UP', False)
            horizontal_line()
        elif up_colors[0][1] != solved_up_color and up_colors[2][1] != solved_up_color and up_colors[1][0] == solved_up_color and up_colors[1][2] == solved_up_color:
            horizontal_line()
        else:
            if up_colors[0][1] == solved_up_color and up_colors[1][2] == solved_up_color:
                cube_model.rotate_U_streak()
                cube_ui.rotate_side('UP', True)
            elif up_colors[2][1] == solved_up_color and up_colors[1][0] == solved_up_color:
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
            elif up_colors[2][1] == solved_up_color and up_colors[1][2] == solved_up_color:
                cube_model.rotate_U()
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
                cube_ui.rotate_side('UP', False)
            corner()

    def final(self, cube_model, cube_ui, cube_solved):
    #расставляет цвета ребер
        p5 = 0
        p4 = 0
        p3 = 0
        p2 = 0
        p1 = 0
        #проверка на уже готовый крест
        for _ in range(4):
            cube_model.rotate_U()
            if (cube_model.get_colors(1, 0, 1)['F'] == cube_model.get_colors(1, 0, 0)['F'] and
                cube_model.get_colors(-1, 0, 1)['B'] == cube_model.get_colors(-1, 0, 0)['B'] and
                cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 1, 0)['R'] and
                cube_model.get_colors(0, -1, 1)['L'] == cube_model.get_colors(0, -1, 0)['L']):
                p1 = p1 + 1

        if p1 == 0:
            while ((cube_model.get_colors(1, 0, 1)['F'] != cube_model.get_colors(1, 0, 0)['F']) or
                    (cube_model.get_colors(-1, 0, 1)['B'] != cube_model.get_colors(-1, 0, 0)['B']) and p2 < 4):
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
                p2 = p2 + 1

            while ((cube_model.get_colors(0, 1, 1)['R'] != cube_model.get_colors(0, 1, 0)['R']) or
                   (cube_model.get_colors(0, -1, 1)['L'] != cube_model.get_colors(0, -1, 0)['L']) and p3 < 4):
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
                p3 = p3 + 1

            if ((cube_model.get_colors(1, 0, 1)['F'] == cube_model.get_colors(1, 0, 0)['F'] and
                cube_model.get_colors(-1, 0, 1)['B'] == cube_model.get_colors(-1, 0, 0)['B']) or
                (cube_model.get_colors(0, 1, 1)['R'] == cube_model.get_colors(0, 1, 0)['R'] and
                cube_model.get_colors(0, -1, 1)['L'] == cube_model.get_colors(0, -1, 0)['L'])):
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
                cube_model.rotate_R_streak()
                cube_ui.rotate_side('RIGHT', True)
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)
                for _ in range(2):
                    cube_model.rotate_U()
                    cube_ui.rotate_side('UP', False)
                cube_model.rotate_R_streak()
                cube_ui.rotate_side('RIGHT', True)

            while ((cube_model.get_colors(1, 0, 1)['F'] != cube_model.get_colors(1, 0, 0)['F'] or
                    cube_model.get_colors(0, 1, 1)['R'] != cube_model.get_colors(0, 1, 0)['R']) and
                   (cube_model.get_colors(0, -1, 1)['L'] != cube_model.get_colors(0, -1, 0)['L'] or
                    cube_model.get_colors(1, 0, 1)['F'] != cube_model.get_colors(1, 0, 0)['F']) and
                   (cube_model.get_colors(-1, 0, 1)['B'] != cube_model.get_colors(-1, 0, 0)['B'] or
                    cube_model.get_colors(0, -1, 1)['L'] != cube_model.get_colors(0, -1, 0)['L']) and
                   (cube_model.get_colors(0, 1, 1)['R'] != cube_model.get_colors(0, 1, 0)['R'] or
                    cube_model.get_colors(-1, 0, 1)['B'] != cube_model.get_colors(-1, 0, 0)['B'])):
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)

            while ((cube_model.get_colors(0, 1, 1)['R'] != cube_model.get_colors(0, 1, 0)['R']) or
                   (cube_model.get_colors(-1, 0, 1)['B'] != cube_model.get_colors(-1, 0, 0)['B'])):
                cube_model.rotate_cube_U()
                cube_ui.rotate_cube('UP', False)

            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)
            cube_model.rotate_U()
            cube_ui.rotate_side('UP', False)
            cube_model.rotate_R_streak()
            cube_ui.rotate_side('RIGHT', True)
            cube_model.rotate_U()
            cube_ui.rotate_side('UP', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)
            for _ in range(2):
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
            cube_model.rotate_R_streak()
            cube_ui.rotate_side('RIGHT', True)

            while cube_model.get_colors(1, 0, 1)['F'] != cube_model.get_colors(1, 0, 0)['F']:
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)

    #расставляет уголки
        #проверка на то что уголки нужными цветами вверх
        if (cube_model.get_colors(1, 1, 1)['U'] == cube_model.get_colors(1, -1, 1)['U'] == cube_model.get_colors(-1, -1, 1)['U'] == cube_model.get_colors(-1, 1, 1)['U']):
            p4 = p4 + 1
        #расставляем уголки нужным цветом вверх
        if p4 == 0:
            for _ in range(4):
                if (cube_model.get_colors(1, 1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U'] and
                    cube_model.get_colors(1, 1, 1)['F'] == cube_model.get_colors(0, 0, 1)['U']):
                    while cube_model.get_colors(1, 1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U']:
                        for _ in range(2):
                            cube_model.rotate_R()
                            cube_ui.rotate_side('RIGHT', False)
                            cube_model.rotate_F_streak()
                            cube_ui.rotate_side('FACE', True)
                            cube_model.rotate_R_streak()
                            cube_ui.rotate_side('RIGHT', True)
                            cube_model.rotate_F()
                            cube_ui.rotate_side('FACE', False)
                if (cube_model.get_colors(1, 1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U'] and
                    cube_model.get_colors(1, 1, 1)['R'] == cube_model.get_colors(0, 0, 1)['U']):
                    while cube_model.get_colors(1, 1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U']:
                        for _ in range(2):
                            cube_model.rotate_F_streak()
                            cube_ui.rotate_side('FACE', True)
                            cube_model.rotate_R()
                            cube_ui.rotate_side('RIGHT', False)
                            cube_model.rotate_F()
                            cube_ui.rotate_side('FACE', False)
                            cube_model.rotate_R_streak()
                            cube_ui.rotate_side('RIGHT', True)
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
        while cube_model.get_colors(1, 0, 0) != cube_solved.get_colors(1, 0, 0):
            cube_solved.rotate_cube_U()

        #ставим уголки по своим местам
        if (cube_model.get_colors(1, 1, 1) != cube_solved.get_colors(1, 1, 1) and
            cube_model.get_colors(1, -1, 1) != cube_solved.get_colors(1, -1, 1) and
            cube_model.get_colors(-1, -1, 1) != cube_solved.get_colors(-1, -1, 1) and
            cube_model.get_colors(-1, 1, 1) != cube_solved.get_colors(-1, 1, 1)):
            for _ in range(2):
                cube_model.rotate_R_streak()
                cube_ui.rotate_side('RIGHT', True)
                for _ in range(2):
                    cube_model.rotate_D()
                    cube_ui.rotate_side('DOWN', False)
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
            cube_model.rotate_R_streak()
            cube_ui.rotate_side('RIGHT', True)
            for _ in range(2):
                cube_model.rotate_D()
                cube_ui.rotate_side('DOWN', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)
            for _ in range(2):
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
            cube_model.rotate_R_streak()
            cube_ui.rotate_side('RIGHT', True)
            for _ in range(2):
                cube_model.rotate_D()
                cube_ui.rotate_side('DOWN', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)

        while (cube_model.get_colors(1, -1, 1)['L'] != cube_model.get_colors(0, -1, 0)['L'] or
                cube_model.get_colors(1, -1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U'] or
                cube_model.get_colors(1, -1, 1)['F'] != cube_model.get_colors(1, 0, 0)['F']):
            cube_model.rotate_cube_U()
            cube_ui.rotate_cube('UP', False)

        while (cube_model.get_colors(1, -1, 1)['L'] != cube_model.get_colors(0, -1, 0)['L'] or
                cube_model.get_colors(1, -1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U'] or
                cube_model.get_colors(1, -1, 1)['F'] != cube_model.get_colors(1, 0, 0)['F'] or
               cube_model.get_colors(-1, -1, 1)['L'] != cube_model.get_colors(0, -1, 0)['L'] or
               cube_model.get_colors(-1, -1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U'] or
               cube_model.get_colors(-1, -1, 1)['B'] != cube_model.get_colors(-1, 0, 0)['B'] or
               cube_model.get_colors(-1, 1, 1)['B'] != cube_model.get_colors(-1, 0, 0)['B'] or
               cube_model.get_colors(-1, 1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U'] or
               cube_model.get_colors(-1, 1, 1)['R'] != cube_model.get_colors(0, 1, 0)['R'] or
               cube_model.get_colors(1, 1, 1)['R'] != cube_model.get_colors(0, 1, 0)['R'] or
               cube_model.get_colors(1, 1, 1)['U'] != cube_model.get_colors(0, 0, 1)['U'] or
               cube_model.get_colors(1, 1, 1)['F'] != cube_model.get_colors(1, 0, 0)['F']):

            for _ in range(2):
                cube_model.rotate_R_streak()
                cube_ui.rotate_side('RIGHT', True)
                for _ in range(2):
                    cube_model.rotate_D()
                    cube_ui.rotate_side('DOWN', False)
                cube_model.rotate_R()
                cube_ui.rotate_side('RIGHT', False)
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
            cube_model.rotate_R_streak()
            cube_ui.rotate_side('RIGHT', True)
            for _ in range(2):
                cube_model.rotate_D()
                cube_ui.rotate_side('DOWN', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)
            for _ in range(2):
                cube_model.rotate_U()
                cube_ui.rotate_side('UP', False)
            cube_model.rotate_R_streak()
            cube_ui.rotate_side('RIGHT', True)
            for _ in range(2):
                cube_model.rotate_D()
                cube_ui.rotate_side('DOWN', False)
            cube_model.rotate_R()
            cube_ui.rotate_side('RIGHT', False)
        
        # восстановить ориентацию собранного кубика:
        while cube_model.get_colors(1, 0, 0) != cube_solved.get_colors(1, 0, 0):
            cube_solved.rotate_cube_U()
